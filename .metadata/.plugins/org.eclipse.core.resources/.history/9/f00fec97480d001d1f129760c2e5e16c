package game;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class Main {
	
//	画面の横幅
	private static final int WIDTH = 256+16;
//	画面の高さ
	private static final int HEIGHT = 256+38;
		
		
//	グリッドクラス
	private static GridInfo Ginfo;
		
	
//	呼び出し元
	public static void main(String[] args) {
		
		GameFrame gameFrame = new GameFrame();
		
		gameFrame.setTitle("15Puzzles");
		
		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		gameFrame.setSize(WIDTH,HEIGHT);
		
		gameFrame.setVisible(true);
		
	}
}






class Ginfo{
	private int gridXNum;
	private int gridYNum;
	private int gridFlag[][];
	
	Ginfo(int x,int y){
		gridXNum = x;
		gridYNum = y;
		gridFlag = new int[gridXNum][gridYNum];
		
		for(int i=0; i<gridYNum;i++) {
			for(int o=0; o<gridYNum;o++) {
				gridFlag[i][o] = (i*y)+o+1;
			}
		}
		
		gridFlag[y-1][x-1]=0;
		
		public void shfleTitle() {
			int cTX = 0;
			int cTY = 0;
			int cedTX = 0;
			int cedTY = 0;
			
			int ran;
			boolean blnRet = false;
			
			for(int i = 0;i<500;i++) {
				cTX = getEmpGridXNum();
				cTY = getEmpGridYNum();
				
				ran = (int)(Math.random()*4);
				
				switch(ran) {
				case 0:
					blnRet = moveTile(cTX+1,cTY);
					cedTX = cTX+1;
					cedTY = cTY;
					break;
				case 1:
					blnRet = moveTile(cTX-1,cTY);
					cedTX = cTX-1;
					cedTY = cTY;
					break;
				case 2:
					blnRet = moveTile(cTX,cTY+1);
					cedTX = cTX;
					cedTY = cTY+1;
					break;
				case 3:
					blnRet = moveTile(cTX,cTY-1);
					cedTX = cTX;
					cedTY = cTY-1;
					break;
				}
				if(blnRet==true) {
					cTX = cedTX;
					cTY = cedTY;
					moveTile(cTX,cTY);
				}
			}
		}
		public int getEmpGridXNum() {
			int rx = 0;
			for (int a = 0;a<gridYNum;a++) {
				for (int b = 0;b<gridXNum;b++) {
					if(gridFlag[a][b]==0) {
						rx = b;
					}
				}
			}
			return rx;
		}
		public int getEmpGridYNum() {
			int ry = 0;
			for (int a = 0;a<gridYNum;a++) {
				for (int b = 0;b<gridXNum;b++) {
					if(gridFlag[a][b]==0) {
						ry = a;
					}
				}
			}
			return ry;
		}
		
		public boolean moveTile(int cTX,int cTY) {
			boolean blnRet;
			boolean blnExist;
			blnRet = true;
			blnExist = false;
			
			while(true) {
				if(cTX + 1<gridXNum && cTX >=0 && cTY >=0 && gridYNum) {
					
				}
			}
			
		}






}
