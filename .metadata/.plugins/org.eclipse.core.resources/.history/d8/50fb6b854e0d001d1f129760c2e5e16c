package game;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class GameFrame extends JFrame implements MouseListener{
	
//	ゲームの状態フラグ　タイトル
	private static final int Game_wait = 0;
//	ゲームの状態フラグ　ゲーム中
	private static final int Game_Ing = 1;
//	ボードの横マス
	private static final int x = 4;
//　ボードの縦マス
	private static final int y = 4;
//	マスの横幅
	private static final int Grid_width = 64;
//	マスの縦幅
	private static final int Grid_height = 64;
//	ゲーム状態のフラグ
	private static int gameFlag;
//	グリッドクラス
	private static GridInfo Ginfo;
//	画像配列
	private static ImageIcon titleImage[];
//	ラベル
	private static JLabel label1[];
	
	
//	コンストラクタ
	GameFrame(){
		
//		GInfo呼び出し
		Ginfo = new GridInfo(x,y);
//		イメージの定義
		titleImage = new ImageIcon[x*y+1];
//		ラベル定義
		label1 = new JLabel[x*y+1];
		
		this.getContentPane().setLayout(null);
		
		
//		1~15までのコマ画像を読み込み
		DecimalFormat decimalFormat = new DecimalFormat("00");
		
		for(int i = 1;i < x * y;i++) {
			titleImage[i] = new ImageIcon("./src/game/images/"+decimalFormat.format(i)+".gif");
			System.out.print(titleImage[i]);
			label1[i] = new JLabel(titleImage[i]);
			
			this.getContentPane().add(label1[i]);
		
		}
			
//		1~15までのコマをボード上に配置
		for(int y = 0;y<y;y++) {
			for(int x = 0;x<x;x++) {
				if(Ginfo.getTileNum(x,y) !=0) {
					label1[Ginfo.getTileNum(x,y)].setBounds(x*Grid_width,y*Grid_height,Grid_width,Grid_height);
				}
			
			}
		}
			this.getContentPane().addMouseListener(this);
		
		}
		
		
//		ゲーム初期
		public void gemeInit() {
			Ginfo.shfleTile();
			
			gameFlag = Game_Ing;
		}
		
		public void mousePressed(MouseEvent e) {
			int clicktitlex;
			int clicktitley;
			boolean blnRet;
			
			switch(gameFlag) {
			case Game_wait:
				System.out.println("GAME START");
				gemeInit();
				break;
			case Game_Ing:
//				クリックされた位置を取得
				clicktitlex = (int)((e.getX()) / Grid_width);
				clicktitley = (int)((e.getY()) / Grid_height);
				
				blnRet = Ginfo.moveTile(clicktitlex,clicktitley);
				
				blnRet = Ginfo.getGameClearFlag();
				
				if(blnRet == true) {
					gameFlag = Game_wait;
					System.out.println("GAME OVER");
					
				}
				break;
			}
				
				for(int y = 0;y<y;y++) {
					for(int x = 0;x<x;x++) {
						if(Ginfo.getTileNum(x,y) !=0) {
							label1[Ginfo.getTileNum(x,y)].setBounds(x*Grid_width,y*Grid_height,Grid_width,Grid_height);
						}
					}
				}
				
				this.setVisible(true);
				
			}
			public void mouseExited(MouseEvent e) {}
			public void mouseEntered(MouseEvent e) {}


			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO 自動生成されたメソッド・スタブ
				
			}


			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO 自動生成されたメソッド・スタブ
				
			}
			
		}